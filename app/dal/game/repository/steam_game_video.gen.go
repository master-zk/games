// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"games/app/dal/game/model"
)

func newSteamGameVideo(db *gorm.DB, opts ...gen.DOOption) steamGameVideo {
	_steamGameVideo := steamGameVideo{}

	_steamGameVideo.steamGameVideoDo.UseDB(db, opts...)
	_steamGameVideo.steamGameVideoDo.UseModel(&model.SteamGameVideo{})

	tableName := _steamGameVideo.steamGameVideoDo.TableName()
	_steamGameVideo.ALL = field.NewAsterisk(tableName)
	_steamGameVideo.ID = field.NewUint64(tableName, "id")
	_steamGameVideo.Name = field.NewString(tableName, "name")
	_steamGameVideo.SteamGameID = field.NewUint(tableName, "steam_game_id")
	_steamGameVideo.OriginID = field.NewUint(tableName, "origin_id")
	_steamGameVideo.Thumbnail = field.NewString(tableName, "thumbnail")
	_steamGameVideo.Webm480 = field.NewString(tableName, "webm_480")
	_steamGameVideo.WebmMax = field.NewString(tableName, "webm_max")
	_steamGameVideo.Mp4480 = field.NewString(tableName, "mp4_480")
	_steamGameVideo.Mp4Max = field.NewString(tableName, "mp4_max")
	_steamGameVideo.Used = field.NewUint(tableName, "used")
	_steamGameVideo.CreatedAt = field.NewTime(tableName, "created_at")
	_steamGameVideo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_steamGameVideo.DeletedAt = field.NewField(tableName, "deleted_at")

	_steamGameVideo.fillFieldMap()

	return _steamGameVideo
}

// steamGameVideo steam游戏-视频
type steamGameVideo struct {
	steamGameVideoDo steamGameVideoDo

	ALL         field.Asterisk
	ID          field.Uint64
	Name        field.String // name
	SteamGameID field.Uint   // steam游戏ID
	OriginID    field.Uint   // steam游戏movieID
	Thumbnail   field.String // 缩略图
	Webm480     field.String // webm 480 视频地址
	WebmMax     field.String // webm max 视频地址
	Mp4480      field.String // mp4 480 视频地址
	Mp4Max      field.String // mp4 max 视频地址
	Used        field.Uint   // 状态：1=已使用，2=未使用
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (s steamGameVideo) Table(newTableName string) *steamGameVideo {
	s.steamGameVideoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s steamGameVideo) As(alias string) *steamGameVideo {
	s.steamGameVideoDo.DO = *(s.steamGameVideoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *steamGameVideo) updateTableName(table string) *steamGameVideo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.Name = field.NewString(table, "name")
	s.SteamGameID = field.NewUint(table, "steam_game_id")
	s.OriginID = field.NewUint(table, "origin_id")
	s.Thumbnail = field.NewString(table, "thumbnail")
	s.Webm480 = field.NewString(table, "webm_480")
	s.WebmMax = field.NewString(table, "webm_max")
	s.Mp4480 = field.NewString(table, "mp4_480")
	s.Mp4Max = field.NewString(table, "mp4_max")
	s.Used = field.NewUint(table, "used")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *steamGameVideo) WithContext(ctx context.Context) *steamGameVideoDo {
	return s.steamGameVideoDo.WithContext(ctx)
}

func (s steamGameVideo) TableName() string { return s.steamGameVideoDo.TableName() }

func (s steamGameVideo) Alias() string { return s.steamGameVideoDo.Alias() }

func (s steamGameVideo) Columns(cols ...field.Expr) gen.Columns {
	return s.steamGameVideoDo.Columns(cols...)
}

func (s *steamGameVideo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *steamGameVideo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["steam_game_id"] = s.SteamGameID
	s.fieldMap["origin_id"] = s.OriginID
	s.fieldMap["thumbnail"] = s.Thumbnail
	s.fieldMap["webm_480"] = s.Webm480
	s.fieldMap["webm_max"] = s.WebmMax
	s.fieldMap["mp4_480"] = s.Mp4480
	s.fieldMap["mp4_max"] = s.Mp4Max
	s.fieldMap["used"] = s.Used
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s steamGameVideo) clone(db *gorm.DB) steamGameVideo {
	s.steamGameVideoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s steamGameVideo) replaceDB(db *gorm.DB) steamGameVideo {
	s.steamGameVideoDo.ReplaceDB(db)
	return s
}

type steamGameVideoDo struct{ gen.DO }

func (s steamGameVideoDo) Debug() *steamGameVideoDo {
	return s.withDO(s.DO.Debug())
}

func (s steamGameVideoDo) WithContext(ctx context.Context) *steamGameVideoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s steamGameVideoDo) ReadDB() *steamGameVideoDo {
	return s.Clauses(dbresolver.Read)
}

func (s steamGameVideoDo) WriteDB() *steamGameVideoDo {
	return s.Clauses(dbresolver.Write)
}

func (s steamGameVideoDo) Session(config *gorm.Session) *steamGameVideoDo {
	return s.withDO(s.DO.Session(config))
}

func (s steamGameVideoDo) Clauses(conds ...clause.Expression) *steamGameVideoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s steamGameVideoDo) Returning(value interface{}, columns ...string) *steamGameVideoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s steamGameVideoDo) Not(conds ...gen.Condition) *steamGameVideoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s steamGameVideoDo) Or(conds ...gen.Condition) *steamGameVideoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s steamGameVideoDo) Select(conds ...field.Expr) *steamGameVideoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s steamGameVideoDo) Where(conds ...gen.Condition) *steamGameVideoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s steamGameVideoDo) Order(conds ...field.Expr) *steamGameVideoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s steamGameVideoDo) Distinct(cols ...field.Expr) *steamGameVideoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s steamGameVideoDo) Omit(cols ...field.Expr) *steamGameVideoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s steamGameVideoDo) Join(table schema.Tabler, on ...field.Expr) *steamGameVideoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s steamGameVideoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *steamGameVideoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s steamGameVideoDo) RightJoin(table schema.Tabler, on ...field.Expr) *steamGameVideoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s steamGameVideoDo) Group(cols ...field.Expr) *steamGameVideoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s steamGameVideoDo) Having(conds ...gen.Condition) *steamGameVideoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s steamGameVideoDo) Limit(limit int) *steamGameVideoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s steamGameVideoDo) Offset(offset int) *steamGameVideoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s steamGameVideoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *steamGameVideoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s steamGameVideoDo) Unscoped() *steamGameVideoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s steamGameVideoDo) Create(values ...*model.SteamGameVideo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s steamGameVideoDo) CreateInBatches(values []*model.SteamGameVideo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s steamGameVideoDo) Save(values ...*model.SteamGameVideo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s steamGameVideoDo) First() (*model.SteamGameVideo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SteamGameVideo), nil
	}
}

func (s steamGameVideoDo) Take() (*model.SteamGameVideo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SteamGameVideo), nil
	}
}

func (s steamGameVideoDo) Last() (*model.SteamGameVideo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SteamGameVideo), nil
	}
}

func (s steamGameVideoDo) Find() ([]*model.SteamGameVideo, error) {
	result, err := s.DO.Find()
	return result.([]*model.SteamGameVideo), err
}

func (s steamGameVideoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SteamGameVideo, err error) {
	buf := make([]*model.SteamGameVideo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s steamGameVideoDo) FindInBatches(result *[]*model.SteamGameVideo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s steamGameVideoDo) Attrs(attrs ...field.AssignExpr) *steamGameVideoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s steamGameVideoDo) Assign(attrs ...field.AssignExpr) *steamGameVideoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s steamGameVideoDo) Joins(fields ...field.RelationField) *steamGameVideoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s steamGameVideoDo) Preload(fields ...field.RelationField) *steamGameVideoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s steamGameVideoDo) FirstOrInit() (*model.SteamGameVideo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SteamGameVideo), nil
	}
}

func (s steamGameVideoDo) FirstOrCreate() (*model.SteamGameVideo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SteamGameVideo), nil
	}
}

func (s steamGameVideoDo) FindByPage(offset int, limit int) (result []*model.SteamGameVideo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s steamGameVideoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s steamGameVideoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s steamGameVideoDo) Delete(models ...*model.SteamGameVideo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *steamGameVideoDo) withDO(do gen.Dao) *steamGameVideoDo {
	s.DO = *do.(*gen.DO)
	return s
}
