// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"games/app/internal/model"
)

func newSteamGameImage(db *gorm.DB, opts ...gen.DOOption) steamGameImage {
	_steamGameImage := steamGameImage{}

	_steamGameImage.steamGameImageDo.UseDB(db, opts...)
	_steamGameImage.steamGameImageDo.UseModel(&model.SteamGameImage{})

	tableName := _steamGameImage.steamGameImageDo.TableName()
	_steamGameImage.ALL = field.NewAsterisk(tableName)
	_steamGameImage.ID = field.NewUint64(tableName, "id")
	_steamGameImage.SteamGameID = field.NewUint(tableName, "steam_game_id")
	_steamGameImage.PathThumbnail = field.NewString(tableName, "path_thumbnail")
	_steamGameImage.PathFull = field.NewString(tableName, "path_full")
	_steamGameImage.ImageCode = field.NewString(tableName, "image_code")
	_steamGameImage.Used = field.NewUint(tableName, "used")
	_steamGameImage.CreatedAt = field.NewTime(tableName, "created_at")
	_steamGameImage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_steamGameImage.DeletedAt = field.NewField(tableName, "deleted_at")

	_steamGameImage.fillFieldMap()

	return _steamGameImage
}

// steamGameImage steam游戏-图片
type steamGameImage struct {
	steamGameImageDo steamGameImageDo

	ALL           field.Asterisk
	ID            field.Uint64
	SteamGameID   field.Uint   // steam游戏ID
	PathThumbnail field.String // 缩略图
	PathFull      field.String // 原图
	ImageCode     field.String // 图片标记
	Used          field.Uint   // 状态：1=已使用，2=未使用
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field

	fieldMap map[string]field.Expr
}

func (s steamGameImage) Table(newTableName string) *steamGameImage {
	s.steamGameImageDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s steamGameImage) As(alias string) *steamGameImage {
	s.steamGameImageDo.DO = *(s.steamGameImageDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *steamGameImage) updateTableName(table string) *steamGameImage {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.SteamGameID = field.NewUint(table, "steam_game_id")
	s.PathThumbnail = field.NewString(table, "path_thumbnail")
	s.PathFull = field.NewString(table, "path_full")
	s.ImageCode = field.NewString(table, "image_code")
	s.Used = field.NewUint(table, "used")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *steamGameImage) WithContext(ctx context.Context) *steamGameImageDo {
	return s.steamGameImageDo.WithContext(ctx)
}

func (s steamGameImage) TableName() string { return s.steamGameImageDo.TableName() }

func (s steamGameImage) Alias() string { return s.steamGameImageDo.Alias() }

func (s steamGameImage) Columns(cols ...field.Expr) gen.Columns {
	return s.steamGameImageDo.Columns(cols...)
}

func (s *steamGameImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *steamGameImage) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["steam_game_id"] = s.SteamGameID
	s.fieldMap["path_thumbnail"] = s.PathThumbnail
	s.fieldMap["path_full"] = s.PathFull
	s.fieldMap["image_code"] = s.ImageCode
	s.fieldMap["used"] = s.Used
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s steamGameImage) clone(db *gorm.DB) steamGameImage {
	s.steamGameImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s steamGameImage) replaceDB(db *gorm.DB) steamGameImage {
	s.steamGameImageDo.ReplaceDB(db)
	return s
}

type steamGameImageDo struct{ gen.DO }

func (s steamGameImageDo) Debug() *steamGameImageDo {
	return s.withDO(s.DO.Debug())
}

func (s steamGameImageDo) WithContext(ctx context.Context) *steamGameImageDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s steamGameImageDo) ReadDB() *steamGameImageDo {
	return s.Clauses(dbresolver.Read)
}

func (s steamGameImageDo) WriteDB() *steamGameImageDo {
	return s.Clauses(dbresolver.Write)
}

func (s steamGameImageDo) Session(config *gorm.Session) *steamGameImageDo {
	return s.withDO(s.DO.Session(config))
}

func (s steamGameImageDo) Clauses(conds ...clause.Expression) *steamGameImageDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s steamGameImageDo) Returning(value interface{}, columns ...string) *steamGameImageDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s steamGameImageDo) Not(conds ...gen.Condition) *steamGameImageDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s steamGameImageDo) Or(conds ...gen.Condition) *steamGameImageDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s steamGameImageDo) Select(conds ...field.Expr) *steamGameImageDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s steamGameImageDo) Where(conds ...gen.Condition) *steamGameImageDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s steamGameImageDo) Order(conds ...field.Expr) *steamGameImageDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s steamGameImageDo) Distinct(cols ...field.Expr) *steamGameImageDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s steamGameImageDo) Omit(cols ...field.Expr) *steamGameImageDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s steamGameImageDo) Join(table schema.Tabler, on ...field.Expr) *steamGameImageDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s steamGameImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *steamGameImageDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s steamGameImageDo) RightJoin(table schema.Tabler, on ...field.Expr) *steamGameImageDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s steamGameImageDo) Group(cols ...field.Expr) *steamGameImageDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s steamGameImageDo) Having(conds ...gen.Condition) *steamGameImageDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s steamGameImageDo) Limit(limit int) *steamGameImageDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s steamGameImageDo) Offset(offset int) *steamGameImageDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s steamGameImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *steamGameImageDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s steamGameImageDo) Unscoped() *steamGameImageDo {
	return s.withDO(s.DO.Unscoped())
}

func (s steamGameImageDo) Create(values ...*model.SteamGameImage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s steamGameImageDo) CreateInBatches(values []*model.SteamGameImage, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s steamGameImageDo) Save(values ...*model.SteamGameImage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s steamGameImageDo) First() (*model.SteamGameImage, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SteamGameImage), nil
	}
}

func (s steamGameImageDo) Take() (*model.SteamGameImage, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SteamGameImage), nil
	}
}

func (s steamGameImageDo) Last() (*model.SteamGameImage, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SteamGameImage), nil
	}
}

func (s steamGameImageDo) Find() ([]*model.SteamGameImage, error) {
	result, err := s.DO.Find()
	return result.([]*model.SteamGameImage), err
}

func (s steamGameImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SteamGameImage, err error) {
	buf := make([]*model.SteamGameImage, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s steamGameImageDo) FindInBatches(result *[]*model.SteamGameImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s steamGameImageDo) Attrs(attrs ...field.AssignExpr) *steamGameImageDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s steamGameImageDo) Assign(attrs ...field.AssignExpr) *steamGameImageDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s steamGameImageDo) Joins(fields ...field.RelationField) *steamGameImageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s steamGameImageDo) Preload(fields ...field.RelationField) *steamGameImageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s steamGameImageDo) FirstOrInit() (*model.SteamGameImage, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SteamGameImage), nil
	}
}

func (s steamGameImageDo) FirstOrCreate() (*model.SteamGameImage, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SteamGameImage), nil
	}
}

func (s steamGameImageDo) FindByPage(offset int, limit int) (result []*model.SteamGameImage, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s steamGameImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s steamGameImageDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s steamGameImageDo) Delete(models ...*model.SteamGameImage) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *steamGameImageDo) withDO(do gen.Dao) *steamGameImageDo {
	s.DO = *do.(*gen.DO)
	return s
}
